import { NodeType } from "../../_helpers/nodes";
import { Person, IPerson, IUpdatedPerson } from "../../archive/person";
import { createNode, deleteNode, getNode, getNodes, removeProperties, updateNode } from "../utils/crud";

export async function getPerson(id: string): Promise<Person | undefined> {
    const matchedNode: object | undefined = await getNode(NodeType.PERSON, 'id: $id', { id });
    
    if(matchedNode){
        return matchedNode as Person;
    }

    return undefined;
}

//person id will be overridden by id generated by DB 
export async function createPerson(person: IPerson): Promise<Person> {
    const createdPerson: object | undefined = await createNode(NodeType.PERSON, prepPersonProps(person), person);
    
    return new Person(createdPerson as IPerson);
}

export async function deletePerson(id: string): Promise<Person | undefined> {
    const deletedPerson: object | undefined = await deleteNode(NodeType.PERSON, 'id: $id', { id });

    return deletedPerson as Person;
}

export async function updatePerson(updatedPerson: IUpdatedPerson): Promise<Person | undefined> {
    const anythingToUpdate: string[] = updatedPersonToProps(updatedPerson);
    let matchedPerson;

    if(anythingToUpdate.length > 0){
        matchedPerson = await updateNode(NodeType.PERSON, 'p', 'id', anythingToUpdate, updatedPerson);
    }
    
    const removedProps = updatedPersonRemovedProps(updatedPerson);
    if(removedProps.length > 0){
        matchedPerson = await removeProperties(NodeType.PERSON, 'p', 'id', removedProps, { id: updatedPerson.id });
    }
    return matchedPerson as Person;
}

export async function getPersons(): Promise<Person[]>{
    const persons: Person[] = [];

    const matchedPersons = await getNodes(NodeType.PERSON);

    matchedPersons.map((person) => {
        persons.push(new Person(person));
    })

    return persons;
}

function prepPersonProps(person: IPerson): string[] {
    const props: string[] = [`id:apoc.create.uuid()`];

    if(person.firstName) props.push('firstName: $firstName');
    if(person.secondName) props.push('secondName: $secondName');
    if(person.lastName) props.push('lastName: $lastName');
    if(person.birthDate) props.push('birthDate: $birthDate');
    if(person.deathDate) props.push('deathDate: $deathDate');

    return props;
}

function updatedPersonRemovedProps(updatedPerson: IUpdatedPerson): string[]{
    const removedProps: string[] = [];

    if(updatedPerson.updatedFirstName === null) removedProps.push(`p.firstName`);
    if(updatedPerson.updatedSecondName === null) removedProps.push(`p.secondName`);
    if(updatedPerson.updatedLastName === null) removedProps.push(`p.lastName`);
    if(updatedPerson.updatedBirthDate === null) removedProps.push(`p.birthDate`);
    if(updatedPerson.updatedDeathDate === null) removedProps.push(`p.deathDate`);

    return removedProps;
}

function updatedPersonToProps(updatedPerson: IUpdatedPerson): string[] {
    const props: string[] = [];

    if(updatedPerson.updatedFirstName !== undefined && updatedPerson.updatedFirstName !== null) props.push(`p.firstName = $updatedFirstName`);
    if(updatedPerson.updatedSecondName!== undefined && updatedPerson.updatedSecondName!== null) props.push(`p.secondName = $updatedSecondName`);
    if(updatedPerson.updatedLastName!== undefined && updatedPerson.updatedLastName!== null) props.push(`p.lastName = $updatedLastName`);
    if(updatedPerson.updatedBirthDate!== undefined && updatedPerson.updatedBirthDate!== null) props.push(`p.birthDate = $updatedBirthDate`);
    if(updatedPerson.updatedDeathDate!== undefined && updatedPerson.updatedDeathDate!== null) props.push(`p.deathDate = $updatedDeathDate`);
 
    return props;
}